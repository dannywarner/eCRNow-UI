[{"D:\\Projects\\eCRNow\\eCRNow-UI\\src\\index.js":"1","D:\\Projects\\eCRNow\\eCRNow-UI\\src\\App.js":"2","D:\\Projects\\eCRNow\\eCRNow-UI\\src\\serviceWorker.js":"3","D:\\Projects\\eCRNow\\eCRNow-UI\\src\\Views\\ClientDetails\\ClientDetails.js":"4","D:\\Projects\\eCRNow\\eCRNow-UI\\src\\Layout\\Header\\Header.js":"5","D:\\Projects\\eCRNow\\eCRNow-UI\\src\\Views\\ClientDetailsList\\ClientDetailsList.js":"6","D:\\Projects\\eCRNow\\eCRNow-UI\\src\\Views\\Authorizations\\Authorizations.js":"7","D:\\Projects\\eCRNow\\eCRNow-UI\\src\\Views\\HealthCareSettingsList\\HealthCareSettingsList.js":"8","D:\\Projects\\eCRNow\\eCRNow-UI\\src\\Views\\HealthCareSettings\\HealthCareSettings.js":"9","D:\\Projects\\eCRNow\\eCRNow-UI\\src\\Views\\KAR\\KAR.js":"10"},{"size":464,"mtime":1631513262148,"results":"11","hashOfConfig":"12"},{"size":3810,"mtime":1631513298009,"results":"13","hashOfConfig":"12"},{"size":5086,"mtime":1631513262149,"results":"14","hashOfConfig":"12"},{"size":44236,"mtime":1633005149917,"results":"15","hashOfConfig":"12"},{"size":1184,"mtime":1631513298009,"results":"16","hashOfConfig":"12"},{"size":4719,"mtime":1631513262134,"results":"17","hashOfConfig":"12"},{"size":15811,"mtime":1631513262130,"results":"18","hashOfConfig":"12"},{"size":4858,"mtime":1631513298012,"results":"19","hashOfConfig":"12"},{"size":55347,"mtime":1633105863086,"results":"20","hashOfConfig":"12"},{"size":12081,"mtime":1631521952803,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"2d6qa",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},"D:\\Projects\\eCRNow\\eCRNow-UI\\src\\index.js",[],["44","45"],"D:\\Projects\\eCRNow\\eCRNow-UI\\src\\App.js",[],"D:\\Projects\\eCRNow\\eCRNow-UI\\src\\serviceWorker.js",[],"D:\\Projects\\eCRNow\\eCRNow-UI\\src\\Views\\ClientDetails\\ClientDetails.js",[],"D:\\Projects\\eCRNow\\eCRNow-UI\\src\\Layout\\Header\\Header.js",[],"D:\\Projects\\eCRNow\\eCRNow-UI\\src\\Views\\ClientDetailsList\\ClientDetailsList.js",[],"D:\\Projects\\eCRNow\\eCRNow-UI\\src\\Views\\Authorizations\\Authorizations.js",[],"D:\\Projects\\eCRNow\\eCRNow-UI\\src\\Views\\HealthCareSettingsList\\HealthCareSettingsList.js",[],"D:\\Projects\\eCRNow\\eCRNow-UI\\src\\Views\\HealthCareSettings\\HealthCareSettings.js",["46","47","48","49","50","51"],"D:\\Projects\\eCRNow\\eCRNow-UI\\src\\Views\\KAR\\KAR.js",["52","53","54","55","56"],"import React, { Component } from 'react';\r\nimport {\r\n    Alert,\r\n    Row,\r\n    Col,\r\n    Form, Card, Accordion, Button,Table,OverlayTrigger\r\n} from 'react-bootstrap';\r\nimport './KAR.css';\r\nimport { store } from 'react-notifications-component';\r\n\r\nclass KAR extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.props;\r\n        this.state = {\r\n          isSaved:false,\r\n          validated: false,\r\n          karRetrieved:false,\r\n          details:[]\r\n        }\r\n\r\n        this.getKARs = this.getKARs.bind(this);\r\n        this.openAddNewHealthCareSettings =this.openAddNewHealthCareSettings.bind(this);\r\n        this.saveKAR = this.saveKAR.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n      this.setState({\r\n          [e.target.name]: e.target.value\r\n      });\r\n  }\r\n\r\n  openAddNewHealthCareSettings() {\r\n    this.props.history.push('healthCareSettings');\r\n}\r\n\r\n    getKARs() {\r\n        console.log(\"clicked\");\r\n        console.log(this.state.fhirServerURL);\r\n        fetch(this.state.fhirServerURL + \"/PlanDefinition/\", {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    return response.json();\r\n                } else {\r\n                    const errorMessage = response.json();\r\n                    console.log(errorMessage);\r\n                    store.addNotification({\r\n                        title: '' + response.status + '',\r\n                        message: 'Error in fetching the PlanDefinitions',\r\n                        type: 'danger',\r\n                        insert: 'bottom',\r\n                        container: 'bottom-right',\r\n                        animationIn: ['animated', 'fadeIn'],\r\n                        animationOut: ['animated', 'fadeOut'],\r\n                        dismiss: {\r\n                            duration: 5000,\r\n                            click: true,\r\n                            onScreen: true\r\n                        }\r\n                    });\r\n                    return;\r\n                }\r\n            })\r\n            .then(result => {\r\n                console.log(result);\r\n                if (result) {\r\n                    console.log(result);\r\n                    this.setState({\r\n                      karRetrieved:true\r\n                    })\r\n                    this.renderKARTable(result);\r\n                }\r\n\r\n            });\r\n    }\r\n\r\n    renderKARTable(bundle){\r\n      const tableEntries = [];\r\n      const bundleEntries = bundle.entry;\r\n      if(bundleEntries.length>0){\r\n        for(var i=0; i<bundleEntries.length; i++){\r\n          const resource = bundleEntries[i].resource;\r\n          const tableRow = {\r\n            karId: resource.id?resource.id:\"\",\r\n            karName: resource.name?resource.name:\"\",\r\n            karPublisher: resource.publisher?resource.publisher:\"\",\r\n            karVersion: resource.version?resource.version:\"\"\r\n          }\r\n          tableEntries.push(tableRow);\r\n        }\r\n      }\r\n      this.setState({\r\n        details:tableEntries\r\n      })\r\n    }\r\n\r\n    saveKAR(){\r\n      const karObj = {\r\n        repoName: this.state.repoName,\r\n        fhirServerURL: this.state.fhirServerURL,\r\n        kars_info: this.state.details\r\n      }\r\n\r\n      fetch(process.env.REACT_APP_ECR_BASE_URL + \"/api/kar\", {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(karObj)\r\n    })\r\n        .then(response => {\r\n            if (response.status === 200) {\r\n                this.setState({\r\n                    isSaved: true\r\n                });\r\n                return response.json();\r\n            } else {\r\n                const errorMessage = response.json();\r\n                console.log(errorMessage);\r\n                store.addNotification({\r\n                    title: '' + response.status + '',\r\n                    message: 'Error in Saving the Knowledge Artifact Repositories',\r\n                    type: 'danger',\r\n                    insert: 'bottom',\r\n                    container: 'bottom-right',\r\n                    animationIn: ['animated', 'fadeIn'],\r\n                    animationOut: ['animated', 'fadeOut'],\r\n                    dismiss: {\r\n                        duration: 5000,\r\n                        click: true,\r\n                        onScreen: true\r\n                    }\r\n                });\r\n                return;\r\n            }\r\n        })\r\n        .then(result => {\r\n            console.log(result);\r\n            if (result) {\r\n                this.setState({\r\n                    fhirServerURL: \"\",\r\n                    details:[],\r\n                    karRetrieved:false\r\n                });\r\n                store.addNotification({\r\n                    title: 'Success',\r\n                    message: 'KAR Details are saved successfully.',\r\n                    type: 'success',\r\n                    insert: 'bottom',\r\n                    container: 'bottom-right',\r\n                    animationIn: ['animated', 'fadeIn'],\r\n                    animationOut: ['animated', 'fadeOut'],\r\n                    dismiss: {\r\n                        duration: 5000,\r\n                        click: true,\r\n                        onScreen: true\r\n                    }\r\n                });\r\n\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const setShow = () => this.setState({ isSaved: false });\r\n\r\n        const handleSubmit = (event) => {\r\n            const form = event.currentTarget;\r\n            if (form.checkValidity() === false) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n            }\r\n            if (form.checkValidity() === true) {\r\n                this.saveHealthCareSettings();\r\n                this.setState({\r\n                    validated: true\r\n                });\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n            }\r\n\r\n        };\r\n        return (\r\n            <div className=\"healthCareSettings\">\r\n                <br />\r\n                <Row>\r\n                    <Col md=\"6\">\r\n                        <h2>eCR Specifications/KAR</h2>\r\n                    </Col>\r\n                    <Col className=\"addClient\">\r\n                        <Button onClick={this.openAddNewHealthCareSettings}>Add New HealthCare Settings</Button>\r\n                    </Col>\r\n                </Row>\r\n                <hr />\r\n                <Row>\r\n                    <Col>\r\n                        <Alert\r\n                            variant=\"success\"\r\n                            show={this.state.isSaved}\r\n                            onClose={() => setShow()}\r\n                            dismissible\r\n                        >\r\n                            KAR is saved successfully.\r\n        </Alert>\r\n                        <Form >\r\n                                <Card className=\"accordionCards\">\r\n                                        <Card.Body className=\"fhirConfiguration\">\r\n                                        <Form.Group as={Row} controlId=\"formHorizontalClientId\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    Repository Name:\r\n                                                </Form.Label>\r\n                                                <Col sm={8}>\r\n                                                    <Form.Control type=\"text\" placeholder=\"Repository Name\" name=\"repoName\" required onChange={e => this.handleChange(e)} value={this.state.repoName} />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        Please provide a Repository Name.\r\n                                                    </Form.Control.Feedback>\r\n                                                </Col>\r\n                                            </Form.Group>\r\n                                            <Form.Group as={Row} controlId=\"formHorizontalClientId\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    FHIR Server URL:\r\n                                                </Form.Label>\r\n                                                <Col sm={8}>\r\n                                                    <Form.Control type=\"text\" placeholder=\"FHIR Server URL\" name=\"fhirServerURL\" required onChange={e => this.handleChange(e)} value={this.state.fhirServerURL} />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        Please provide a FHIR Server URL.\r\n                                                    </Form.Control.Feedback>\r\n                                                </Col>\r\n                                                <Col sm={2}>\r\n                                                <Button type=\"button\" disabled={this.state.repoName == undefined && this.state.fhirServerURL == undefined} onClick={this.getKARs}>Search KAR</Button>\r\n                                                </Col>\r\n                                            </Form.Group>\r\n                                        </Card.Body>\r\n                                </Card>\r\n                                {this.state.karRetrieved  ? (\r\n                                  <Row>\r\n                                  <Col>\r\n                                      <Table responsive=\"lg\" striped bordered hover size=\"sm\">\r\n                                          <tbody>\r\n                                              <tr>\r\n                                                  <th>PlanDefinitionId</th>\r\n                                                  <th>Name</th>\r\n                                                  <th>Publisher</th>\r\n                                                  <th>Version</th>\r\n                                              </tr>\r\n                                              {\r\n                                                  this.state.details.map(get =>\r\n                                                      <tr key={get.karId}>\r\n                                                          <td>{get.karId}</td>\r\n                                                          <td>{get.karName}</td>\r\n                                                          <td>{get.karPublisher}</td>\r\n                                                          <td>{get.karVersion}</td>\r\n                                                      </tr>\r\n                                                  )\r\n                                              }\r\n                                          </tbody>\r\n                                      </Table>\r\n                                  </Col>\r\n                              </Row>\r\n                                ):''}\r\n                                \r\n                                \r\n                            <Row>\r\n                                <Col className=\"text-center\">\r\n                                    <Button type=\"button\" disabled={!this.state.karRetrieved} onClick={this.saveKAR}>Save</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                        {/* <Row>\r\n                            <Col className=\"text-center\">\r\n                                <button\r\n                                    className=\"btn btn-primary submitBtn\"\r\n                                    type=\"button\"\r\n                                    onClick={e => this.saveClientDetails(e)}\r\n                                >\r\n                                    Save\r\n                                </button>\r\n                            </Col>\r\n                        </Row> */}\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default KAR;\r\n",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":10,"column":8,"nodeType":"63","messageId":"64","endLine":10,"endColumn":17},{"ruleId":"61","severity":1,"message":"65","line":11,"column":8,"nodeType":"63","messageId":"64","endLine":11,"endColumn":16},{"ruleId":"66","severity":1,"message":"67","line":204,"column":24,"nodeType":"68","messageId":"69","endLine":204,"endColumn":26},{"ruleId":"70","severity":1,"message":"71","line":214,"column":32,"nodeType":"72","messageId":"73","endLine":221,"endColumn":14},{"ruleId":"74","severity":1,"message":"75","line":214,"column":33,"nodeType":"72","messageId":"76","endLine":214,"endColumn":35},{"ruleId":"74","severity":1,"message":"75","line":268,"column":47,"nodeType":"72","messageId":"76","endLine":268,"endColumn":49},{"ruleId":"61","severity":1,"message":"77","line":6,"column":17,"nodeType":"63","messageId":"64","endLine":6,"endColumn":26},{"ruleId":"61","severity":1,"message":"78","line":6,"column":41,"nodeType":"63","messageId":"64","endLine":6,"endColumn":55},{"ruleId":"61","severity":1,"message":"79","line":173,"column":15,"nodeType":"63","messageId":"64","endLine":173,"endColumn":27},{"ruleId":"66","severity":1,"message":"67","line":236,"column":101,"nodeType":"68","messageId":"69","endLine":236,"endColumn":103},{"ruleId":"66","severity":1,"message":"67","line":236,"column":142,"nodeType":"68","messageId":"69","endLine":236,"endColumn":144},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'TextField' is defined but never used.","Identifier","unusedVar","'MenuItem' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i', 'i', 'i', 'i'.","ArrowFunctionExpression","unsafeRefs","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","expectedInside","'Accordion' is defined but never used.","'OverlayTrigger' is defined but never used.","'handleSubmit' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]